# this is part of the DYGtube Downloader project.
#
# Release: v2.10.4
#
# Copyright (c) 2022-2023  Juan Bindez  <juanbindez780@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#  
# repo: https://github.com/juanBindez


import os
import logging
import urllib3
import time
import base64

from pytube import YouTube
from pytube.cli import on_progress
from tkinter import *
from tkinter import ttk
from tkinter import messagebox
from tkinter import filedialog

from src.source import DownloadInit
from src.playlist_download_module import download_playlist
from src.mix_module import choice_mix
from src.about_module import sobre_software
from src.channel_module import download_channel
from src.progress_bar_module import progress_bar
from src.debug import DebugInfo


ERROR_001 = False
ERROR_002 = False
ERROR_003 = False

def check_quality():
    """this function checks the available resolution of a video."""
    link = entrada_de_dados.get()
    if link == "":
        messagebox.showinfo("DYG Downloader", "The field is empty, paste a URL and see the available resolutions for the video you want to download.")
    else:
        pass
    video = YouTube(link)
    resolucoes = [stream.resolution for stream in video.streams if stream.resolution]
    messagebox.showinfo(title="DYGTUbe", message="The resolutions available for the video, " + video.title + ", ".join(resolucoes))

    
def download_video():
    """Here the video is downloaded.
      the link variable receives the url.
    """
    link = entrada_de_dados.get()
    if link == "":
        messagebox.showerror("DYG Downloader", "the field is empty!")
    elif not link == "":
        pass
    
    save_path = filedialog.askdirectory()
    video = YouTube(link)

    try:
        video_stream = None  # Inicialize a variável com um valor padrão

        if var_1080p.get() == 1:
            video_stream = video.streams.filter(res="1080p").first()
        elif var_720p.get() == 1:
            video_stream = video.streams.filter(res="720p").first()
        elif var_480p.get() == 1:
            video_stream = video.streams.filter(res="480p").first()
        elif var_360p.get() == 1:
            video_stream = video.streams.filter(res="360p").first()
        elif var_240p.get() == 1:
            video_stream = video.streams.filter(res="240p").first()
        elif var_144p.get() == 1:
            video_stream = video.streams.filter(res="144p").first()

        if video_stream is not None:
            DebugInfo.logger_info.info("------------------------------start debugging--------------------------------")
            DebugInfo.logger_info.info("(From main.py ) Starting to download video from URL: %s",link)
            video_stream.download(save_path)
        else:
            try:
                yt = YouTube(link, on_progress_callback = on_progress)
                ys = yt.streams.get_highest_resolution()
                ys.download(save_path)
                DebugInfo.logger_info.info("------------------------------start debugging--------------------------------")
                DebugInfo.logger_info.info("(From main.py ) Starting to download video from URL: %s",link)
            except Exception as e:
                global ERROR_001
                ERROR_001 = True
                messagebox.showerror("DYG Downloader", "Something went wrong!")
                DebugInfo.logger_info.info("------------------------------start debugging--------------------------------")
                DebugInfo.logger_error.error(e, exc_info=True)
                
            if not ERROR_001:
                progress_bar()
            else:
                pass

    except KeyError:
            DebugInfo.logger_info.info("------------------------------start debugging--------------------------------")
            DebugInfo.logger_info.info("(Error from in main.py) Error KeyError found in download video MP4 from URL: %s",link)
            messagebox.showerror("DYG Downloader", "Unable to download, this is caused by some change on Youtube, try another video.")
            DebugInfo.logger_error.error(KeyError, exc_info=True)
    except Exception as e:
            global ERROR_002
            ERROR_002 = True
            messagebox.showerror("DYG Downloader", "Something went wrong!")
            DebugInfo.logger_error.error(e, exc_info=True)

  
def download_mp3():
    """This function downloads audio only."""
    link = entrada_de_dados.get()
    if link == "":
        messagebox.showerror("DYG Downloader", "the field is empty!")
    elif not link == "":
        pass

    save_path = filedialog.askdirectory()

    try:
        EXTENSION_MP3 = '.mp3'
        EXTENSION_MP4 = '.mp4'

        yt = YouTube(link, on_progress_callback=on_progress)
        ys = yt.streams.get_audio_only()
        ys.download(save_path)
        downloaded_file_path = os.path.abspath(ys.default_filename)
        new_file_path = os.path.splitext(downloaded_file_path)[0] + EXTENSION_MP3
        os.rename(downloaded_file_path, new_file_path)

        DebugInfo.logger_info.info("------------------------------start debugging--------------------------------")
        DebugInfo.logger_info.info("(From main) Starting to download audio MP3 from URL: %s",link)
        time.sleep(3)
        
    except Exception as e:
            global ERROR_003
            ERROR_003 = True
            messagebox.showerror("DYG Downloader", "Something went wrong!")
            DebugInfo.logger_info.info("------------------------------start debugging--------------------------------")
            DebugInfo.logger_error.error(e, exc_info=True)
    if not ERROR_003:
        progress_bar()
    else:
        pass

"""information:
    website to generate colors in hex:  https://www.rapidtables.com/web/color/RGB_Color.html
    y ishei ght and x is for sides.
"""

"""site to encode images in base64 https://base64.guru/converter/encode/image"""
BANNER_LOGO = ''
ICON_LOGO = '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'
GUAXINIM = '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'
ICON_QUALITY_VIDEO = 'iVBORw0KGgoAAAANSUhEUgAAABQAAAAVCAYAAABG1c6oAAAABHNCSVQICAgIfAhkiAAAABl0RVh0U29mdHdhcmUAZ25vbWUtc2NyZWVuc2hvdO8Dvz4AAAAmdEVYdENyZWF0aW9uIFRpbWUAZG9tIDA1IG1hciAyMDIzIDE0OjQwOjAxr2NofAAAA5pJREFUOI2NlM9vVFUUxz/nzhum0/lhp06LBihVjERSUEGCYAioYVE1Gg1LXbny73ErG8OiG1ngElkAQoUiBgjQ0EoEZzqlyICdlpn37o/j4r0WKEo8yc3N/fXJ9/y4R840lhVAVektdeh0lhHh/5tCpVqiUKogIkQr+yJCsVKlWKmylqdr1vKcs4h/sbWXHrTvc2v2d0qlElu3beN5Lpj/PHnCLl2d5ocTkxw/OYlz7rl3nwHGvS5T58+TJPHq3p/NeQAeLnZYXOysetG4c5v5uTkUUIUQlMj7gDEGEXDWcnTiGLONe5y9cJlPxz+gXC7RbC1kEMPNm7NsH3uD06fPcu636/T3Ffj6y8PUh4YJwRN571EFYwQxhnyhiCAsLHY5MnEcUSWYNNQicPzEGX46Nckjp4jk6LlAnFi8d4QQMN4HnHM45wgBPjl0kHX5XKpIcquwFZNcRNenVaHA/t1vsn54COc8znmMdQ7n04X3jlKlzK6xrc8Ee6BcJJ/LPVUB5b4Ce3e/jfU+ZXhP5LxH0ojy8K8F5u8ucGPm1uNHxQKHx99nZGQjnU6HH0+cYeZOE0F41IuZuniR0dFRqrVBVBU5drmhAN8d+Z6lJBAAkTT5qsr4wb3sfGv7amaXlzp8e2RiValqQDTQl4PPP/uYyDkPKInkUbFP/QIRKPYXsVntKZCL8uSjHInz2R0DYugFpZc4Ih88IsJHB/bQaN2l2Vpg7v7fK0iuXL3GyKYNGGNQVaanp4mtQ7LfkjPClg3DDNZq1Kpl5OjkjEpWhyKGyAgnT53l2sztVFUIbKxX2PLqZtrtB1ybbaAmrYL+wjq++eoLHjklhEBAiVwIGNUMGEhix1zr7mO3jaHZXqLZvp46ncEAnHc0792nXH0BVUUDGO8C6VCcC1yYukS7011TNLJmTi1xgZ/PTeGsyxgOY63FOod1jm63y8wfTUQEEdjx+ihjr41gnuguG4YH2bVtC1EujWljoc18q4W1lsRaImstIoIxBmOEA+/u5NcrN9j3zg5qL9ZRVW637tFZTlW/t2cXhb4+Xtm8idO/XOKloUEGagNYm6TNIUmSrDmk0OpAjfEP9xP7QC+OAaFeG6Cz3KVS6gcR4iTB5AscOrgP5wNJkv7jEPSxQjEGI4KIYG06IyAILw8PsrTUoT5YwzmfJkCVWJWgimawEAJRHMdPKZQMCpJlXhiq11lfrxNQ4iSBDLgyUnUBVeUfG4P5vrVSquAAAAAASUVORK5CYII='

window = Tk()
window.title("DYGTube Downloader")
window.geometry("500x370")
window['background'] = '#373636'  
window.resizable(False, False)# False for non-responsive window and True for responsive.
window.attributes('-alpha',9.1)
foto_icon = PhotoImage(data=base64.b64decode(ICON_LOGO))
window.iconphoto(True, foto_icon)

#file_img = Image.open('logo.png')
bg = PhotoImage(data=base64.b64decode(BANNER_LOGO))
label = Label(window, image=bg)
label.place(x = 10,y = 60)

bg2 = PhotoImage(data=base64.b64decode(GUAXINIM))
label = Label(window, image=bg2)
label.place(x = 7,y = 310)


button_quality = PhotoImage(data=base64.b64decode(ICON_QUALITY_VIDEO))
botao_mix = Button(window,
                image=button_quality,
                command=check_quality,
                width=16,
                height=17).place(x=423, y=170)


COLOR_FRAME = '#585757'
COLOR_BUTTON = '#191A1A'
COLOR_LETTER = '#00E9CA'

frame = Frame(window, width=600, height=35, bg=COLOR_FRAME)
frame.grid(row=0, column=0)
label = Label(window,
                text="URL*",
                fg=COLOR_LETTER,
                bg="#373636").place(x=40, y=170)

def make_menu(w):
    global the_menu_1
    the_menu_1 = Menu(w, tearoff=0)
    the_menu_1.add_command(label="Colar")
    
    
def show_menu(e):
    w = e.widget
    the_menu_1.entryconfigure("Colar",
    command=lambda: w.event_generate("<<Paste>>"))
    the_menu_1.tk.call("tk_popup", the_menu_1, e.x_root, e.y_root)


var_1080p = IntVar()
var_720p = IntVar()
var_480p = IntVar()
var_360p = IntVar()
var_240p = IntVar()
var_144p = IntVar()

check_1080p = Checkbutton(window,
                         text="1080p",
                         fg=COLOR_LETTER,
                         bg="#373636",
                         variable=var_1080p,)

check_720p = Checkbutton(window,
                        text="720p",
                        fg=COLOR_LETTER,
                        bg="#373636",
                        variable=var_720p)

check_480p = Checkbutton(window,
                        text="480p",
                        fg=COLOR_LETTER,
                        bg="#373636",
                        variable=var_480p)

check_360p = Checkbutton(window,
                        text="360p",
                        fg=COLOR_LETTER,
                        bg="#373636",
                        variable=var_360p)

check_240p = Checkbutton(window,
                        text="240p",
                        fg=COLOR_LETTER,
                        bg="#373636",
                        variable=var_240p)

check_144p = Checkbutton(window,
                        text="144p",
                        fg=COLOR_LETTER,
                        bg="#373636",
                        variable=var_144p)

check_1080p.place(x=80, y=220)
check_720p.place(x=149, y=220)
check_480p.place(x=210, y=220)
check_360p.place(x=270, y=220)
check_240p.place(x=330, y=220)
check_144p.place(x=390, y=220)

make_menu(window)
entrada_de_dados = Entry(window, width=40)
entrada_de_dados.place(x=95, y=170)
entrada_de_dados.bind_class("Entry", "<Button-3><ButtonRelease-3>", show_menu)
lbl = Label(window, text = "")

# version label
label = Label(window,
                text="v2.10.4",
                fg=COLOR_LETTER,
                bg="#373636").place(x=50, y=340)

# button that starts the download.
botao = Button(window,
                text="Download Video",
                command=download_video,
                fg=COLOR_LETTER,
                bg=COLOR_BUTTON,).place(x=120, y=270)

# button to start downloading only the audio of the video.
botao_mp3 = Button(window,
                text="Download MP3",
                command=download_mp3,
                fg=COLOR_LETTER,
                bg=COLOR_BUTTON,).place(x=270, y=270)


# button to display information about the program.
botao_sobre = Button(window,
                text="About",
                command=sobre_software,
                fg=COLOR_LETTER,
                bg=COLOR_BUTTON,
                width=3,).place(x=165, y=2)

# button to playlist download.
botao_playlist = Button(window,
                text="Playlist",
                command=download_playlist,
                fg=COLOR_LETTER,
                bg=COLOR_BUTTON,
                width=4,).place(x=104, y=2)

# button to channel download.
botao_channel = Button(window,
                text="Channel",
                command=download_channel,
                fg=COLOR_LETTER,
                bg=COLOR_BUTTON,
                width=4,).place(x=45, y=2) 

# mix option button.                     
botao_mix = Button(window,
                text="Mix",
                command=choice_mix,
                fg=COLOR_LETTER,
                bg=COLOR_BUTTON,
                width=2,).place(x=2, y=2)

if __name__ == "__main__":
  window.mainloop()
